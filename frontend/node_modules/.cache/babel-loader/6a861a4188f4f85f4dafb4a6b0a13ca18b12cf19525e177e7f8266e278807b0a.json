{"ast":null,"code":"var _jsxFileName = \"/home/sergey/WebstormProjects/univer/filecrypt/src/components/FileDownloadRedirect.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport filesApi from '../api/files';\nimport { toast } from 'react-toastify';\nimport { saveAs } from \"file-saver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FileDownloadRedirect = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  useEffect(() => {\n    const downloadFile = async () => {\n      try {\n        if (!id) {\n          throw new Error('File ID not specified');\n        }\n        const response = await filesApi.downloadCommonFile(id);\n        const contentDisposition = response.headers.get('Content-Disposition');\n        let fileName = 'downloaded_file.pdf';\n        if (contentDisposition) {\n          let match = contentDisposition.match(/filename\\*=(?:UTF-8'')?([^;]+)/i);\n          if (match && match[1]) {\n            fileName = decodeURIComponent(match[1].replace(/['\"]/g, '').trim());\n          } else {\n            match = contentDisposition.match(/filename=([^;]+)/i);\n            if (match && match[1]) {\n              fileName = match[1].replace(/['\"]/g, '').trim();\n              fileName = fixEncoding(fileName); // ← тут магия\n            }\n          }\n        }\n        const blob = new Blob([response.data]);\n        saveAs(blob, fileName);\n        navigate(-1);\n      } catch (e) {\n        toast.error('Не удалось загрузить файл');\n        navigate('/storage/my');\n      }\n    };\n    downloadFile();\n  }, [id, navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Downloading file...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 16\n  }, this);\n};\n_s(FileDownloadRedirect, \"jBhyhCnGnTynLG86SR547tPdgyU=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = FileDownloadRedirect;\nvar _c;\n$RefreshReg$(_c, \"FileDownloadRedirect\");","map":{"version":3,"names":["useEffect","useParams","useNavigate","filesApi","toast","saveAs","jsxDEV","_jsxDEV","FileDownloadRedirect","_s","id","navigate","downloadFile","Error","response","downloadCommonFile","contentDisposition","headers","get","fileName","match","decodeURIComponent","replace","trim","fixEncoding","blob","Blob","data","e","error","children","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/sergey/WebstormProjects/univer/filecrypt/src/components/FileDownloadRedirect.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport filesApi  from '../api/files';\nimport { toast } from 'react-toastify';\nimport { saveAs } from \"file-saver\";\n\nexport const FileDownloadRedirect = () => {\n    const { id } = useParams();\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const downloadFile = async () => {\n            try {\n                if (!id) {\n                    throw new Error('File ID not specified');\n                }\n\n                const response = await filesApi.downloadCommonFile(id);\n\n                const contentDisposition = response.headers.get('Content-Disposition');\n                let fileName = 'downloaded_file.pdf';\n\n                if (contentDisposition) {\n                    let match = contentDisposition.match(/filename\\*=(?:UTF-8'')?([^;]+)/i);\n                    if (match && match[1]) {\n                        fileName = decodeURIComponent(match[1].replace(/['\"]/g, '').trim());\n                    } else {\n                        match = contentDisposition.match(/filename=([^;]+)/i);\n                        if (match && match[1]) {\n                            fileName = match[1].replace(/['\"]/g, '').trim();\n                            fileName = fixEncoding(fileName); // ← тут магия\n                        }\n                    }\n                }\n\n                const blob = new Blob([response.data]);\n\n                saveAs(blob, fileName);\n\n                navigate(-1);\n                } catch (e) {\n                    toast.error('Не удалось загрузить файл');\n                    navigate('/storage/my');\n                }\n            };\n\n            downloadFile();\n        }, [id, navigate]);\n\n        return <div>Downloading file...</div>;\n    }"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAOC,QAAQ,MAAO,cAAc;AACpC,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,MAAM,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,OAAO,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtC,MAAM;IAAEC;EAAG,CAAC,GAAGT,SAAS,CAAC,CAAC;EAC1B,MAAMU,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACZ,MAAMY,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACA,IAAI,CAACF,EAAE,EAAE;UACL,MAAM,IAAIG,KAAK,CAAC,uBAAuB,CAAC;QAC5C;QAEA,MAAMC,QAAQ,GAAG,MAAMX,QAAQ,CAACY,kBAAkB,CAACL,EAAE,CAAC;QAEtD,MAAMM,kBAAkB,GAAGF,QAAQ,CAACG,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;QACtE,IAAIC,QAAQ,GAAG,qBAAqB;QAEpC,IAAIH,kBAAkB,EAAE;UACpB,IAAII,KAAK,GAAGJ,kBAAkB,CAACI,KAAK,CAAC,iCAAiC,CAAC;UACvE,IAAIA,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;YACnBD,QAAQ,GAAGE,kBAAkB,CAACD,KAAK,CAAC,CAAC,CAAC,CAACE,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;UACvE,CAAC,MAAM;YACHH,KAAK,GAAGJ,kBAAkB,CAACI,KAAK,CAAC,mBAAmB,CAAC;YACrD,IAAIA,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;cACnBD,QAAQ,GAAGC,KAAK,CAAC,CAAC,CAAC,CAACE,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;cAC/CJ,QAAQ,GAAGK,WAAW,CAACL,QAAQ,CAAC,CAAC,CAAC;YACtC;UACJ;QACJ;QAEA,MAAMM,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACZ,QAAQ,CAACa,IAAI,CAAC,CAAC;QAEtCtB,MAAM,CAACoB,IAAI,EAAEN,QAAQ,CAAC;QAEtBR,QAAQ,CAAC,CAAC,CAAC,CAAC;MACZ,CAAC,CAAC,OAAOiB,CAAC,EAAE;QACRxB,KAAK,CAACyB,KAAK,CAAC,2BAA2B,CAAC;QACxClB,QAAQ,CAAC,aAAa,CAAC;MAC3B;IACJ,CAAC;IAEDC,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,CAACF,EAAE,EAAEC,QAAQ,CAAC,CAAC;EAElB,oBAAOJ,OAAA;IAAAuB,QAAA,EAAK;EAAmB;IAAAX,QAAA,EAAAY,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AACzC,CAAC;AAAAxB,EAAA,CA5CQD,oBAAoB;EAAA,QACdP,SAAS,EACPC,WAAW;AAAA;AAAAgC,EAAA,GAFnB1B,oBAAoB;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}