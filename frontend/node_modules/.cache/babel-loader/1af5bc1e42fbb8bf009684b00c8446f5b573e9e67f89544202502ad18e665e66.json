{"ast":null,"code":"export async function decryptFile(encryptedBase64, encryptedAesKey, privateKeyPem) {\n  try {\n    const symmetricKey = await decryptWithPrivateKey(encryptedAesKey, privateKeyPem);\n    console.log('symmetricKey', symmetricKey);\n\n    // Декодируем Base64\n    const encryptedBuffer = base64ToArrayBuffer(encryptedBase64);\n\n    // IV — первые 12 байтов\n    const iv = encryptedBuffer.slice(0, 12);\n    const encryptedData = encryptedBuffer.slice(12);\n\n    // Импортируем симметричный ключ\n    const key = await window.crypto.subtle.importKey(\"raw\", symmetricKey, {\n      name: \"AES-GCM\"\n    }, false, [\"decrypt\"]);\n\n    // Расшифровка файла\n    const decryptedData = await window.crypto.subtle.decrypt({\n      name: \"AES-GCM\",\n      iv\n    }, key, encryptedData);\n    return new Blob([decryptedData], {\n      type: \"application/octet-stream\"\n    });\n  } catch (error) {\n    console.error(\"Ошибка расшифровки файла:\", error);\n    throw error;\n  }\n}\nexport async function decryptWithPrivateKey(encryptedKeyBase64, privateKeyPem) {\n  // Удаляем заголовки PEM\n  const privateKey = await importPrivateKey(privateKeyPem);\n\n  // Декодируем Base64\n  const encryptedKeyBuffer = base64ToArrayBuffer(encryptedKeyBase64);\n\n  // Расшифровываем ключ\n  return await window.crypto.subtle.decrypt({\n    name: \"RSA-OAEP\"\n  }, privateKey, encryptedKeyBuffer);\n}\nasync function importPrivateKey(pem) {\n  const pemHeader = \"-----BEGIN PRIVATE KEY-----\";\n  const pemFooter = \"-----END PRIVATE KEY-----\";\n  const pemContents = pem.replace(pemHeader, \"\").replace(pemFooter, \"\").replace(/\\s+/g, \"\");\n  const binaryDer = base64ToArrayBuffer(pemContents);\n  return await window.crypto.subtle.importKey(\"pkcs8\", binaryDer, {\n    name: \"RSA-OAEP\",\n    hash: \"SHA-256\"\n  }, true, [\"decrypt\"]);\n}\nexport async function generateKeyPair() {\n  return await window.crypto.subtle.generateKey({\n    name: \"RSA-OAEP\",\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: \"SHA-256\"\n  }, true, [\"encrypt\", \"decrypt\"]);\n}\nexport async function exportPublicKey(publicKey) {\n  const exported = await window.crypto.subtle.exportKey(\"spki\", publicKey);\n  return arrayBufferToBase64(exported);\n}\nexport async function exportPrivateKey(privateKey) {\n  const exported = await window.crypto.subtle.exportKey(\"pkcs8\", privateKey);\n  const base64 = arrayBufferToBase64(exported);\n  return `-----BEGIN PRIVATE KEY-----\\n${base64}\\n-----END PRIVATE KEY-----`;\n}\nexport async function generateAesKey() {\n  return await window.crypto.subtle.generateKey({\n    name: \"AES-GCM\",\n    length: 256\n  }, true, [\"encrypt\", \"decrypt\"]);\n}\nexport async function encryptFile(file, key) {\n  const fileData = await file.arrayBuffer();\n  const iv = window.crypto.getRandomValues(new Uint8Array(12));\n  const encryptedData = await window.crypto.subtle.encrypt({\n    name: \"AES-GCM\",\n    iv: iv\n  }, key, fileData);\n\n  // Объединяем IV и зашифрованные данные\n  const result = new Uint8Array(iv.length + encryptedData.byteLength);\n  result.set(iv, 0);\n  result.set(new Uint8Array(encryptedData), iv.length);\n  return new Blob([result], {\n    type: file.type\n  });\n}\nexport async function encryptWithPublicKey(data, publicKeyPem) {\n  // Импорт публичного ключа из PEM формата\n  const publicKey = await importPublicKey(publicKeyPem);\n\n  // Экспорт AES ключа\n  const exportedKey = await window.crypto.subtle.exportKey(\"raw\", data);\n\n  // Шифрование\n  const encrypted = await window.crypto.subtle.encrypt({\n    name: \"RSA-OAEP\"\n  }, publicKey, exportedKey);\n\n  // Конвертация в Base64\n  return arrayBufferToBase64(encrypted);\n}\nasync function importPublicKey(pem) {\n  // Удаляем PEM заголовки\n  const pemHeader = \"-----BEGIN PUBLIC KEY-----\";\n  const pemFooter = \"-----END PUBLIC KEY-----\";\n  const pemContents = pem.replace(pemHeader, '').replace(pemFooter, '').replace(/\\s+/g, '');\n\n  // Декодируем Base64\n  const binaryDer = base64ToArrayBuffer(pemContents);\n  return await window.crypto.subtle.importKey(\"spki\", binaryDer, {\n    name: \"RSA-OAEP\",\n    hash: \"SHA-256\"\n  }, true, [\"encrypt\"]);\n}\nfunction arrayBufferToBase64(buffer) {\n  let binary = '';\n  const bytes = new Uint8Array(buffer);\n  for (let i = 0; i < bytes.byteLength; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return window.btoa(binary);\n}\nfunction base64ToArrayBuffer(base64) {\n  const binaryString = window.atob(base64);\n  const bytes = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes;\n}","map":{"version":3,"names":["decryptFile","encryptedBase64","encryptedAesKey","privateKeyPem","symmetricKey","decryptWithPrivateKey","console","log","encryptedBuffer","base64ToArrayBuffer","iv","slice","encryptedData","key","window","crypto","subtle","importKey","name","decryptedData","decrypt","Blob","type","error","encryptedKeyBase64","privateKey","importPrivateKey","encryptedKeyBuffer","pem","pemHeader","pemFooter","pemContents","replace","binaryDer","hash","generateKeyPair","generateKey","modulusLength","publicExponent","Uint8Array","exportPublicKey","publicKey","exported","exportKey","arrayBufferToBase64","exportPrivateKey","base64","generateAesKey","length","encryptFile","file","fileData","arrayBuffer","getRandomValues","encrypt","result","byteLength","set","encryptWithPublicKey","data","publicKeyPem","importPublicKey","exportedKey","encrypted","buffer","binary","bytes","i","String","fromCharCode","btoa","binaryString","atob","charCodeAt"],"sources":["/home/sergey/WebstormProjects/univer/filecrypt/src/utils/crypto.js"],"sourcesContent":["export async function decryptFile(encryptedBase64, encryptedAesKey, privateKeyPem) {\n    try {\n        const symmetricKey = await decryptWithPrivateKey(encryptedAesKey, privateKeyPem);\n\n        console.log('symmetricKey', symmetricKey);\n\n        // Декодируем Base64\n        const encryptedBuffer = base64ToArrayBuffer(encryptedBase64);\n\n        // IV — первые 12 байтов\n        const iv = encryptedBuffer.slice(0, 12);\n        const encryptedData = encryptedBuffer.slice(12);\n\n        // Импортируем симметричный ключ\n        const key = await window.crypto.subtle.importKey(\n            \"raw\",\n            symmetricKey,\n            { name: \"AES-GCM\" },\n            false,\n            [\"decrypt\"]\n        );\n\n        // Расшифровка файла\n        const decryptedData = await window.crypto.subtle.decrypt(\n            { name: \"AES-GCM\", iv },\n            key,\n            encryptedData\n        );\n\n        return new Blob([decryptedData], { type: \"application/octet-stream\" });\n\n    } catch (error) {\n        console.error(\"Ошибка расшифровки файла:\", error);\n        throw error;\n    }\n}\n\nexport async function decryptWithPrivateKey(encryptedKeyBase64, privateKeyPem) {\n    // Удаляем заголовки PEM\n    const privateKey = await importPrivateKey(privateKeyPem);\n\n    // Декодируем Base64\n    const encryptedKeyBuffer = base64ToArrayBuffer(encryptedKeyBase64);\n\n    // Расшифровываем ключ\n    return await window.crypto.subtle.decrypt(\n        {name: \"RSA-OAEP\"},\n        privateKey,\n        encryptedKeyBuffer\n    );\n}\n\nasync function importPrivateKey(pem) {\n    const pemHeader = \"-----BEGIN PRIVATE KEY-----\";\n    const pemFooter = \"-----END PRIVATE KEY-----\";\n    const pemContents = pem.replace(pemHeader, \"\").replace(pemFooter, \"\").replace(/\\s+/g, \"\");\n\n    const binaryDer = base64ToArrayBuffer(pemContents);\n\n    return await window.crypto.subtle.importKey(\n        \"pkcs8\",\n        binaryDer,\n        { name: \"RSA-OAEP\", hash: \"SHA-256\" },\n        true,\n        [\"decrypt\"]\n    );\n}\n\nexport async function generateKeyPair() {\n    return await window.crypto.subtle.generateKey(\n        {\n            name: \"RSA-OAEP\",\n            modulusLength: 2048,\n            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n            hash: \"SHA-256\",\n        },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    );\n}\n\nexport async function exportPublicKey(publicKey: CryptoKey) {\n    const exported = await window.crypto.subtle.exportKey(\"spki\", publicKey);\n    return arrayBufferToBase64(exported);\n}\n\nexport async function exportPrivateKey(privateKey: CryptoKey) {\n    const exported = await window.crypto.subtle.exportKey(\"pkcs8\", privateKey);\n    const base64 = arrayBufferToBase64(exported);\n    return `-----BEGIN PRIVATE KEY-----\\n${base64}\\n-----END PRIVATE KEY-----`;\n}\n\nexport async function generateAesKey() {\n    return await window.crypto.subtle.generateKey(\n        {\n            name: \"AES-GCM\",\n            length: 256,\n        },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    );\n}\n\nexport async function encryptFile(file, key) {\n    const fileData = await file.arrayBuffer();\n    const iv = window.crypto.getRandomValues(new Uint8Array(12));\n\n    const encryptedData = await window.crypto.subtle.encrypt(\n        {\n            name: \"AES-GCM\",\n            iv: iv\n        },\n        key,\n        fileData\n    );\n\n    // Объединяем IV и зашифрованные данные\n    const result = new Uint8Array(iv.length + encryptedData.byteLength);\n    result.set(iv, 0);\n    result.set(new Uint8Array(encryptedData), iv.length);\n\n    return new Blob([result], { type: file.type });\n}\n\nexport async function encryptWithPublicKey(data, publicKeyPem) {\n    // Импорт публичного ключа из PEM формата\n    const publicKey = await importPublicKey(publicKeyPem);\n\n    // Экспорт AES ключа\n    const exportedKey = await window.crypto.subtle.exportKey(\"raw\", data);\n\n    // Шифрование\n    const encrypted = await window.crypto.subtle.encrypt(\n        { name: \"RSA-OAEP\" },\n        publicKey,\n        exportedKey\n    );\n\n    // Конвертация в Base64\n    return arrayBufferToBase64(encrypted);\n}\n\nasync function importPublicKey(pem) {\n    // Удаляем PEM заголовки\n    const pemHeader = \"-----BEGIN PUBLIC KEY-----\";\n    const pemFooter = \"-----END PUBLIC KEY-----\";\n    const pemContents = pem\n        .replace(pemHeader, '')\n        .replace(pemFooter, '')\n        .replace(/\\s+/g, '');\n\n    // Декодируем Base64\n    const binaryDer = base64ToArrayBuffer(pemContents);\n\n    return await window.crypto.subtle.importKey(\n        \"spki\",\n        binaryDer,\n        { name: \"RSA-OAEP\", hash: \"SHA-256\" },\n        true,\n        [\"encrypt\"]\n    );\n}\n\nfunction arrayBufferToBase64(buffer) {\n    let binary = '';\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    return window.btoa(binary);\n}\n\nfunction base64ToArrayBuffer(base64) {\n    const binaryString = window.atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}