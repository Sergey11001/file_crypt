{"ast":null,"code":"export async function generateKeyPair() {\n  return await window.crypto.subtle.generateKey({\n    name: \"RSA-OAEP\",\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: \"SHA-256\"\n  }, true, [\"encrypt\", \"decrypt\"]);\n}\nexport async function exportPublicKey(publicKey) {\n  const exported = await window.crypto.subtle.exportKey(\"spki\", publicKey);\n  return arrayBufferToBase64(exported);\n}\nexport async function exportPrivateKey(privateKey) {\n  const exported = await window.crypto.subtle.exportKey(\"pkcs8\", privateKey);\n  const base64 = arrayBufferToBase64(exported);\n  return `-----BEGIN PRIVATE KEY-----\\n${base64}\\n-----END PRIVATE KEY-----`;\n}\nfunction arrayBufferToBase64(buffer) {\n  let binary = '';\n  const bytes = new Uint8Array(buffer);\n  for (let i = 0; i < bytes.byteLength; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return btoa(binary);\n}","map":{"version":3,"names":["generateKeyPair","window","crypto","subtle","generateKey","name","modulusLength","publicExponent","Uint8Array","hash","exportPublicKey","publicKey","exported","exportKey","arrayBufferToBase64","exportPrivateKey","privateKey","base64","buffer","binary","bytes","i","byteLength","String","fromCharCode","btoa"],"sources":["/home/sergey/WebstormProjects/univer/filecrypt/src/utils/crypto.js"],"sourcesContent":["export async function generateKeyPair() {\n    return await window.crypto.subtle.generateKey(\n        {\n            name: \"RSA-OAEP\",\n            modulusLength: 2048,\n            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n            hash: \"SHA-256\",\n        },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    );\n}\n\nexport async function exportPublicKey(publicKey: CryptoKey) {\n    const exported = await window.crypto.subtle.exportKey(\"spki\", publicKey);\n    return arrayBufferToBase64(exported);\n}\n\nexport async function exportPrivateKey(privateKey: CryptoKey) {\n    const exported = await window.crypto.subtle.exportKey(\"pkcs8\", privateKey);\n    const base64 = arrayBufferToBase64(exported);\n    return `-----BEGIN PRIVATE KEY-----\\n${base64}\\n-----END PRIVATE KEY-----`;\n}\n\nfunction arrayBufferToBase64(buffer: ArrayBuffer) {\n    let binary = '';\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    return btoa(binary);\n}\n"],"mappings":"AAAA,OAAO,eAAeA,eAAeA,CAAA,EAAG;EACpC,OAAO,MAAMC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACC,WAAW,CACzC;IACIC,IAAI,EAAE,UAAU;IAChBC,aAAa,EAAE,IAAI;IACnBC,cAAc,EAAE,IAAIC,UAAU,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAClDC,IAAI,EAAE;EACV,CAAC,EACD,IAAI,EACJ,CAAC,SAAS,EAAE,SAAS,CACzB,CAAC;AACL;AAEA,OAAO,eAAeC,eAAeA,CAACC,SAAoB,EAAE;EACxD,MAAMC,QAAQ,GAAG,MAAMX,MAAM,CAACC,MAAM,CAACC,MAAM,CAACU,SAAS,CAAC,MAAM,EAAEF,SAAS,CAAC;EACxE,OAAOG,mBAAmB,CAACF,QAAQ,CAAC;AACxC;AAEA,OAAO,eAAeG,gBAAgBA,CAACC,UAAqB,EAAE;EAC1D,MAAMJ,QAAQ,GAAG,MAAMX,MAAM,CAACC,MAAM,CAACC,MAAM,CAACU,SAAS,CAAC,OAAO,EAAEG,UAAU,CAAC;EAC1E,MAAMC,MAAM,GAAGH,mBAAmB,CAACF,QAAQ,CAAC;EAC5C,OAAO,gCAAgCK,MAAM,6BAA6B;AAC9E;AAEA,SAASH,mBAAmBA,CAACI,MAAmB,EAAE;EAC9C,IAAIC,MAAM,GAAG,EAAE;EACf,MAAMC,KAAK,GAAG,IAAIZ,UAAU,CAACU,MAAM,CAAC;EACpC,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,UAAU,EAAED,CAAC,EAAE,EAAE;IACvCF,MAAM,IAAII,MAAM,CAACC,YAAY,CAACJ,KAAK,CAACC,CAAC,CAAC,CAAC;EAC3C;EACA,OAAOI,IAAI,CAACN,MAAM,CAAC;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}