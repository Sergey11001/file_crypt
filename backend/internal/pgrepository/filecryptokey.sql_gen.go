// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: filecryptokey.sql

package pgrepository

import (
	"context"

	"github.com/google/uuid"
)

const deleteAlleFileAccess = `-- name: DeleteAlleFileAccess :exec
DELETE FROM file_crypto_keys
WHERE file_crypto_keys.user_uuid = $1
`

type DeleteAlleFileAccessParams struct {
	UserUuid uuid.UUID `json:"user_uuid"`
}

func (q *Queries) DeleteAlleFileAccess(ctx context.Context, arg DeleteAlleFileAccessParams) error {
	_, err := q.db.Exec(ctx, deleteAlleFileAccess, arg.UserUuid)
	return err
}

const deleteFileAccess = `-- name: DeleteFileAccess :exec
DELETE FROM file_crypto_keys
WHERE file_crypto_keys.user_uuid = $1
  AND file_crypto_keys.file_uuid = $2
  AND file_crypto_keys.file_uuid = (
    SELECT files.uuid FROM files
    WHERE files.user_uuid = $3
    )
`

type DeleteFileAccessParams struct {
	RecipientUuid uuid.UUID `json:"recipient_uuid"`
	FileUuid      uuid.UUID `json:"file_uuid"`
	OwnerUuid     uuid.UUID `json:"owner_uuid"`
}

func (q *Queries) DeleteFileAccess(ctx context.Context, arg DeleteFileAccessParams) error {
	_, err := q.db.Exec(ctx, deleteFileAccess, arg.RecipientUuid, arg.FileUuid, arg.OwnerUuid)
	return err
}

const upsertFileCryptoKey = `-- name: UpsertFileCryptoKey :one
INSERT INTO file_crypto_keys (file_uuid, user_uuid, symmetric_key)
VALUES ($1, $2, $3)
ON CONFLICT (file_uuid, user_uuid) DO
UPDATE SET symmetric_key = EXCLUDED.symmetric_key
RETURNING file_uuid, user_uuid, symmetric_key
`

type UpsertFileCryptoKeyParams struct {
	FileUuid     uuid.UUID `json:"file_uuid"`
	UserUuid     uuid.UUID `json:"user_uuid"`
	SymmetricKey string    `json:"symmetric_key"`
}

func (q *Queries) UpsertFileCryptoKey(ctx context.Context, arg UpsertFileCryptoKeyParams) (FileCryptoKey, error) {
	row := q.db.QueryRow(ctx, upsertFileCryptoKey, arg.FileUuid, arg.UserUuid, arg.SymmetricKey)
	var i FileCryptoKey
	err := row.Scan(&i.FileUuid, &i.UserUuid, &i.SymmetricKey)
	return i, err
}
