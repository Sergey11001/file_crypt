{"ast":null,"code":"export async function generateKeyPair() {\n  return await window.crypto.subtle.generateKey({\n    name: \"RSA-OAEP\",\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: \"SHA-256\"\n  }, true, [\"encrypt\", \"decrypt\"]);\n}\nexport async function exportPublicKey(publicKey) {\n  const exported = await window.crypto.subtle.exportKey(\"spki\", publicKey);\n  return arrayBufferToBase64(exported);\n}\nexport async function exportPrivateKey(privateKey) {\n  const exported = await window.crypto.subtle.exportKey(\"pkcs8\", privateKey);\n  const base64 = arrayBufferToBase64(exported);\n  return `-----BEGIN PRIVATE KEY-----\\n${base64}\\n-----END PRIVATE KEY-----`;\n}\nexport async function generateAesKey() {\n  return await window.crypto.subtle.generateKey({\n    name: \"AES-GCM\",\n    length: 256\n  }, true, [\"encrypt\", \"decrypt\"]);\n}\nexport async function encryptFile(file, key) {\n  const fileData = await file.arrayBuffer();\n  const iv = window.crypto.getRandomValues(new Uint8Array(12));\n  const encryptedData = await window.crypto.subtle.encrypt({\n    name: \"AES-GCM\",\n    iv: iv\n  }, key, fileData);\n\n  // Объединяем IV и зашифрованные данные\n  const result = new Uint8Array(iv.length + encryptedData.byteLength);\n  result.set(iv, 0);\n  result.set(new Uint8Array(encryptedData), iv.length);\n  return new Blob([result], {\n    type: file.type\n  });\n}\nexport async function encryptWithPublicKey(data, publicKeyPem) {\n  // Импорт публичного ключа из PEM формата\n  const publicKey = await importPublicKey(publicKeyPem);\n\n  // Экспорт AES ключа\n  const exportedKey = await window.crypto.subtle.exportKey(\"raw\", data);\n\n  // Шифрование\n  const encrypted = await window.crypto.subtle.encrypt({\n    name: \"RSA-OAEP\"\n  }, publicKey, exportedKey);\n\n  // Конвертация в Base64\n  return arrayBufferToBase64(encrypted);\n}\nasync function importPublicKey(pem) {\n  // Удаляем PEM заголовки\n  const pemHeader = \"-----BEGIN PUBLIC KEY-----\";\n  const pemFooter = \"-----END PUBLIC KEY-----\";\n  const pemContents = pem.replace(pemHeader, '').replace(pemFooter, '').replace(/\\s+/g, '');\n\n  // Декодируем Base64\n  const binaryDer = base64ToArrayBuffer(pemContents);\n  return await window.crypto.subtle.importKey(\"spki\", binaryDer, {\n    name: \"RSA-OAEP\",\n    hash: \"SHA-256\"\n  }, true, [\"encrypt\"]);\n}\nfunction arrayBufferToBase64(buffer) {\n  let binary = '';\n  const bytes = new Uint8Array(buffer);\n  for (let i = 0; i < bytes.byteLength; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return window.btoa(binary);\n}\nfunction base64ToArrayBuffer(base64) {\n  const binaryString = window.atob(base64);\n  const bytes = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes;\n}","map":{"version":3,"names":["generateKeyPair","window","crypto","subtle","generateKey","name","modulusLength","publicExponent","Uint8Array","hash","exportPublicKey","publicKey","exported","exportKey","arrayBufferToBase64","exportPrivateKey","privateKey","base64","generateAesKey","length","encryptFile","file","key","fileData","arrayBuffer","iv","getRandomValues","encryptedData","encrypt","result","byteLength","set","Blob","type","encryptWithPublicKey","data","publicKeyPem","importPublicKey","exportedKey","encrypted","pem","pemHeader","pemFooter","pemContents","replace","binaryDer","base64ToArrayBuffer","importKey","buffer","binary","bytes","i","String","fromCharCode","btoa","binaryString","atob","charCodeAt"],"sources":["/home/sergey/WebstormProjects/univer/filecrypt/src/utils/crypto.js"],"sourcesContent":["export async function generateKeyPair() {\n    return await window.crypto.subtle.generateKey(\n        {\n            name: \"RSA-OAEP\",\n            modulusLength: 2048,\n            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n            hash: \"SHA-256\",\n        },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    );\n}\n\nexport async function exportPublicKey(publicKey: CryptoKey) {\n    const exported = await window.crypto.subtle.exportKey(\"spki\", publicKey);\n    return arrayBufferToBase64(exported);\n}\n\nexport async function exportPrivateKey(privateKey: CryptoKey) {\n    const exported = await window.crypto.subtle.exportKey(\"pkcs8\", privateKey);\n    const base64 = arrayBufferToBase64(exported);\n    return `-----BEGIN PRIVATE KEY-----\\n${base64}\\n-----END PRIVATE KEY-----`;\n}\n\nexport async function generateAesKey() {\n    return await window.crypto.subtle.generateKey(\n        {\n            name: \"AES-GCM\",\n            length: 256,\n        },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    );\n}\n\nexport async function encryptFile(file, key) {\n    const fileData = await file.arrayBuffer();\n    const iv = window.crypto.getRandomValues(new Uint8Array(12));\n\n    const encryptedData = await window.crypto.subtle.encrypt(\n        {\n            name: \"AES-GCM\",\n            iv: iv\n        },\n        key,\n        fileData\n    );\n\n    // Объединяем IV и зашифрованные данные\n    const result = new Uint8Array(iv.length + encryptedData.byteLength);\n    result.set(iv, 0);\n    result.set(new Uint8Array(encryptedData), iv.length);\n\n    return new Blob([result], { type: file.type });\n}\n\nexport async function encryptWithPublicKey(data, publicKeyPem) {\n    // Импорт публичного ключа из PEM формата\n    const publicKey = await importPublicKey(publicKeyPem);\n\n    // Экспорт AES ключа\n    const exportedKey = await window.crypto.subtle.exportKey(\"raw\", data);\n\n    // Шифрование\n    const encrypted = await window.crypto.subtle.encrypt(\n        { name: \"RSA-OAEP\" },\n        publicKey,\n        exportedKey\n    );\n\n    // Конвертация в Base64\n    return arrayBufferToBase64(encrypted);\n}\n\nasync function importPublicKey(pem) {\n    // Удаляем PEM заголовки\n    const pemHeader = \"-----BEGIN PUBLIC KEY-----\";\n    const pemFooter = \"-----END PUBLIC KEY-----\";\n    const pemContents = pem\n        .replace(pemHeader, '')\n        .replace(pemFooter, '')\n        .replace(/\\s+/g, '');\n\n    // Декодируем Base64\n    const binaryDer = base64ToArrayBuffer(pemContents);\n\n    return await window.crypto.subtle.importKey(\n        \"spki\",\n        binaryDer,\n        { name: \"RSA-OAEP\", hash: \"SHA-256\" },\n        true,\n        [\"encrypt\"]\n    );\n}\n\nfunction arrayBufferToBase64(buffer) {\n    let binary = '';\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    return window.btoa(binary);\n}\n\nfunction base64ToArrayBuffer(base64) {\n    const binaryString = window.atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}